{
    "Format String": {
        "prefix": "format",
        "body": [
            "format ${1:T} \"$2\" $0"
        ]
    },
    "Comment": {
        "prefix": "comment",
        "body": [
            "#|",
            "  $0",
            "|#"
        ]
    },
    "Let Expression": {
        "prefix": "let",
        "body": [
            "let (($1))",
            "  $0"
        ]
    },
    "Let-Star Expression": {
        "prefix": "let*",
        "body": [
            "let* (($1))",
            "  $0"
        ]
    },
    "Define Class": {
        "prefix": "defclass",
        "body": [
            "defclass ${1:name} (${2:#| base classes |#})",
            "  (${3:#| slots |#})",
            "  (${4:#| options |#})"
        ]
    },
    "Slot": {
        "prefix": "slot",
        "body": [
            "${1:name}",
            "  :accessor $1",
            "  :initform ${2:nil}",
            "  :initarg :$1"
        ]
    },
    "Define Condition": {
        "prefix": "define-condition",
        "body": [
            "define-condition ${1:name} (${2:error})",
            "  (${3:#| slots |#})",
            "  (:report (lambda (condition stream) (format stream \"~A\" (${4:slot} condition))))"
        ]
    },
    "Define Struct": {
        "prefix": "struct",
        "body": [
            "defstruct ${1:name}",
            "  ${3:#| slots |#}"
        ]
    },
    "Define Struct With Print": {
        "prefix": "struct-with-print",
        "body": [
            "defstruct (${1:name} (:print-function (lambda (struct stream depth)",
            "                                         (if (and *print-level* (<= *print-level* depth))",
            "                                              (format stream \"#\")",
            "                                              (format stream \"$2\" $3)))))",
            "  ${4:#| slots |#}"
        ]
    },
    "Define Function": {
        "prefix": "defun",
        "body": [
            "defun ${1:name} ($2)",
            "  $0"
        ]
    },
    "Define Method": {
        "prefix": "defmethod",
        "body": [
            "defmethod ${1:name} ($2)",
            "  $0"
        ]
    },
    "Define Package": {
        "prefix": "package",
        "body": [
            "(defpackage :${1:name}",
            "  (:use :cl$2))",
            "",
            "(in-package :$1)",
            "",
            "$0"
        ]
    },
    "Define System": {
        "prefix": "defsystem",
        "body": [
            "defsystem \"${1:name}\"",
            "  :description \"$2\"",
            "  :serial t",
            "  :components ((:file \"package\")",
            "                ($0))"
        ]
    }
}